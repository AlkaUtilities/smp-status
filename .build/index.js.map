{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["import { Client, IntentsBitField, ChannelType, EmbedBuilder } from \"discord.js\";\nimport { status as ServerStatus } from \"minecraft-server-util\";\n// import { config as loadenv } from \"dotenv\";\nimport express from \"express\";\nimport config from \"./config\";\nimport { } from \"./typings/enviroment\";\n\n// loadenv();\n\nconst app = express();\n\nconst client = new Client({\n    intents: [\n        IntentsBitField.Flags.GuildMessages,\n        IntentsBitField.Flags.GuildPresences,\n        IntentsBitField.Flags.Guilds,\n    ],\n});\n\napp.get(\"/\", (req, res) => res.sendStatus(200));\n\nclient.once(\"ready\", async (bot) => {\n    console.log(`[CLIENT] Logged in as ${bot.user.tag}`);\n\n    if (!config.smp.ip) {\n        console.warn(\"IP address is empty\");\n        process.exit(0);\n    }\n    if (!config.status.channel) {\n        console.warn(\"Status channel is empty\");\n        process.exit(0);\n    }\n\n    const statusTimer = setInterval(\n        UpdateMessage,\n        config.status.updateInterval * 1000\n    );\n});\n\nlet status = \"unreachable\";\nlet last_server_status = \"unknown\";\n\nasync function UpdateMessage() {\n    const statusChannel = client.channels.cache.get(config.status.channel);\n\n    if (!statusChannel) {\n        console.error(\"Status channel not found\");\n        process.exit(0);\n    }\n    if (statusChannel.type !== ChannelType.GuildText) {\n        console.error(\"Channel is not GuildText\");\n        process.exit(0);\n    }\n\n    let statusMessage = (\n        await statusChannel.messages\n            .fetch()\n            .then((messages) =>\n                messages\n                    .filter((m) => m.author.id === client.user?.id)\n                    .sort((a, b) => b.createdTimestamp - a.createdTimestamp)\n            )\n    ).first();\n\n    if (statusMessage === undefined) {\n        statusMessage = await statusChannel.send({\n            embeds: [new EmbedBuilder().setDescription(\"Initial message\")],\n        });\n    }\n\n    try {\n        let version: any = {\n            name: \"\",\n            protocol: 0,\n        };\n\n        let players: any = {\n            online: 0,\n            max: 0,\n            sample: null\n        }\n\n        await ServerStatus(\n            config.smp.ip,\n            config.smp.port || 25565\n        ).then((res) => {\n            version = res.version;\n            players = res.players;\n        });\n\n        /**\n         * if connection refused (happens when server is starting)\n         * display \"connecton refused. last status: ${last_status}\"\n         * to give the users a hint on why the server is unreachable\n         *\n         *  online version protocol: 760\n         *  other  version protocol: 46\n         */\n\n        // using else if\n        // if (version.name === \"\u00A74\u25CF Offline\" && version.protocol === 46) {\n        //     status = \"offline\";\n        // } else if (version.name === \"\u00A77\u25CC Preparing...\" && version.protocol === 46) {\n        //     status = \"preparing\";\n        // } else if (version.name === \"\u00A77\u25CC Loading...\" && version.protocol === 46) {\n        //     status = \"loading\";\n        // } else if (version.name === \"\u00A77\u25CC Saving...\" && version.protocol === 46) {\n        //     status = \"saving\";\n        // } else if (version.protocol === 760) {\n        //     status = \"online\";\n        // }\n\n        if (version.protocol === 46) {\n            status = version.name.slice(4).replace(/\\./g, \"\").toLowerCase();\n        } else if (version.protocol === 760) {\n            status = \"online\";\n        }\n\n        if (last_server_status !== status || status === \"online\") {\n            last_server_status = status;\n            await statusMessage.edit({\n                content: \"\",\n                embeds: [await BuildEmbed(version, players)],\n            });\n        }\n    } catch (err) {\n        console.log(err);\n        status = \"unreachable\";\n        await statusMessage.edit({\n            content: \"\",\n            embeds: [\n                new EmbedBuilder()\n                    // .setAuthor({\n                    //     iconURL: config.icons.author,\n                    //     name:\n                    //         !config.smp.port || config.smp.port === 25565\n                    //             ? `${config.smp.ip}`\n                    //             : `${config.smp.ip}:${config.smp.port}`,\n                    // })\n                    .setTimestamp()\n                    .setTitle(\"Unreachable\")\n                    .setThumbnail(config.icons.unreachable)\n                    .setColor(`#${config.colors.unreachable}`)\n                    .setDescription(\n                        [\n                            `The server is currently unreachable`,\n                            `The server might currently be starting/stopping`,\n                            `Last status: ${capitalize(last_server_status)}\\n`,\n                            `IP Address: \\`${config.smp.ip}:${config.smp.port}\\``,\n                        ].join(\"\\n\")\n                    ),\n            ],\n        });\n    }\n}\n\nasync function BuildEmbed(\n    version: { name: string; protocol: number },\n    players: {\n        online: number;\n        max: number;\n        sample: { name: string; id: string }[] | null;\n    }\n) {\n    const embed = new EmbedBuilder()\n        // .setAuthor({\n        //     iconURL: config.icons.author,\n        //     name:\n        //         !config.smp.port || config.smp.port === 25565\n        //             ? `${config.smp.ip}`\n        //             : `${config.smp.ip}:${config.smp.port}`,\n        // })\n        .setTimestamp();\n\n    if (status === \"offline\") {\n        embed\n            .setTitle(\"Offline\")\n            .setThumbnail(config.icons.offline)\n            .setColor(`#${config.colors.offline}`)\n            .setDescription(\n                [\n                    `The server is currently offline\\n`,\n                    `IP Address: \\`${config.smp.ip}:${config.smp.port}\\``,\n                ].join(\"\\n\")\n            );\n    } else if (status === \"preparing\") {\n        embed\n            .setTitle(\"Preparing\")\n            .setThumbnail(config.icons.preparing)\n            .setColor(`#${config.colors.preparing}`)\n            .setDescription(\n                [\n                    `The server is currently starting\\n`,\n                    `IP Address: \\`${config.smp.ip}:${config.smp.port}\\``,\n                ].join(\"\\n\")\n            );\n    } else if (status === \"loading\") {\n        embed\n            .setTitle(\"Loading\")\n            .setThumbnail(config.icons.loading)\n            .setColor(`#${config.colors.loading}`)\n            .setDescription(\n                [\n                    `The server is currently starting\\n`,\n                    `IP Address: \\`${config.smp.ip}:${config.smp.port}\\``,\n                ].join(\"\\n\")\n            );\n    } else if (status === \"online\") {\n        embed\n            .setTitle(\"Online\")\n            .setThumbnail(config.icons.online)\n            .setColor(`#${config.colors.online}`)\n            .setDescription(\n                [\n                    `The server is currently online\\n`,\n                    `IP Address: \\`${config.smp.ip}:${config.smp.port}\\``,\n                    `Version: ${version.name}`,\n                    `Players: ${players.online}/${players.max} online`,\n                ].join(\"\\n\")\n            );\n    } else if (status === \"saving\") {\n        embed\n            .setTitle(\"Saving\")\n            .setThumbnail(config.icons.saving)\n            .setColor(`#${config.colors.saving}`)\n            .setDescription(\n                [\n                    `The server is currently stopping\\n`,\n                    `IP Address: \\`${config.smp.ip}:${config.smp.port}\\``,\n                ].join(\"\\n\")\n            );\n    }\n\n    return embed;\n}\n\nfunction capitalize(str: string) {\n    return str[0]?.toUpperCase() + str?.substring(1);\n}\n\nclient.login(process.env[\"TOKEN\"]);\napp.listen(config.port, () =>\n    console.log(`[EXPRESS] Listening on port ${config.port}`)\n);\n"],
  "mappings": "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",
  "names": ["express", "config", "ServerStatus"]
}
