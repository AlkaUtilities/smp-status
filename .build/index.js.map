{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["import {\n    Client,\n    IntentsBitField,\n    ChannelType,\n    EmbedBuilder,\n    ActivityType,\n} from \"discord.js\";\nimport { status as ServerStatus } from \"minecraft-server-util\";\nimport express from \"express\";\nimport config from \"./config\";\nimport { } from \"./typings/enviroment\";\n\n//! Disable in replit\nimport { config as loadenv } from \"dotenv\";\nloadenv();\n\nconsole.log(`[CONFIG] ip: ${config.smp.ip} | port: ${config.smp.port}`);\n\nconst app = express();\n\nconst client = new Client({\n    intents: [\n        IntentsBitField.Flags.GuildMessages,\n        IntentsBitField.Flags.Guilds,\n    ],\n});\n\napp.get(\"/\", (req, res) => {\n    // returns 500 if client isn't logged in.\n    if (client.user === null) return res.sendStatus(500);\n    res.sendStatus(200);\n});\n\nclient.once(\"ready\", async (bot) => {\n    console.log(`[CLIENT] Logged in as ${bot.user.tag}`);\n\n    if (!config.smp.ip) {\n        console.warn(\"IP address is empty\");\n        process.exit(0);\n    }\n    if (!config.status.channel) {\n        console.warn(\"Status channel is empty\");\n        process.exit(0);\n    }\n\n    UpdateMessage();\n});\n\nclient.login(process.env[\"TOKEN\"]);\n\nlet status = \"unreachable\";\nlet last_server_status = \"unknown\";\n\nasync function UpdateMessage() {\n    const statusChannel = client.channels.cache.get(config.status.channel);\n\n    if (!statusChannel) {\n        console.error(\"Status channel not found\");\n        process.exit(0);\n    }\n    if (statusChannel.type !== ChannelType.GuildText) {\n        console.error(\"Channel is not GuildText\");\n        process.exit(0);\n    }\n\n    let statusMessage = (\n        await statusChannel.messages\n            .fetch()\n            .then((messages) =>\n                messages\n                    .filter((m) => m.author.id === client.user?.id)\n                    .sort((a, b) => b.createdTimestamp - a.createdTimestamp)\n            )\n    ).first();\n\n    if (statusMessage === undefined) {\n        statusMessage = await statusChannel.send({\n            embeds: [new EmbedBuilder().setDescription(\"Initial message\")],\n        });\n    }\n\n    try {\n        let version: any = {\n            name: \"\",\n            protocol: 0,\n        };\n\n        let players: any = {\n            online: 0,\n            max: 0,\n            sample: null,\n        };\n\n        await ServerStatus(config.smp.ip, config.smp.port || 25565).then(\n            (res) => {\n                version = res.version;\n                players = res.players;\n                const date = new Date();\n                if (config.debug) {\n                    console.log(\n                        `[${padWithLeadingZeros(\n                            date.getHours(),\n                            2\n                        )}:${padWithLeadingZeros(\n                            date.getMinutes(),\n                            2\n                        )}:${padWithLeadingZeros(\n                            date.getSeconds(),\n                            2\n                        )}] [status]     ${res.version.name} ${res.players.online\n                        }/${res.players.max}`\n                    );\n                }\n            }\n        );\n\n        /**\n         * if connection refused (happens when server is starting)\n         * display \"connecton refused. last status: ${last_status}\"\n         * to give the users a hint on why the server is unreachable\n         *\n         *  online version protocol: 760\n         *  other  version protocol: 46\n         */\n\n        // using else if\n        // if (version.name === \"\u00A74\u25CF Offline\" && version.protocol === 46) {\n        //     status = \"offline\";\n        // } else if (version.name === \"\u00A77\u25CC Preparing...\" && version.protocol === 46) {\n        //     status = \"preparing\";\n        // } else if (version.name === \"\u00A77\u25CC Loading...\" && version.protocol === 46) {\n        //     status = \"loading\";\n        // } else if (version.name === \"\u00A77\u25CC Saving...\" && version.protocol === 46) {\n        //     status = \"saving\";\n        // } else if (version.protocol === 760) {\n        //     status = \"online\";\n        // }\n\n        if (version.protocol === 46) {\n            status = version.name.slice(4).replace(/\\./g, \"\").toLowerCase();\n        } else if (version.protocol === 760) {\n            status = \"online\";\n        }\n\n        if (config.debug) {\n            const date = new Date();\n            console.log(\n                `[${padWithLeadingZeros(\n                    date.getHours(),\n                    2\n                )}:${padWithLeadingZeros(\n                    date.getMinutes(),\n                    2\n                )}:${padWithLeadingZeros(\n                    date.getSeconds(),\n                    2\n                )}] [comparison] last: ${last_server_status} | current: ${status} | ${last_server_status !== status || status === \"online\"\n                    ? \"true\"\n                    : \"false\"\n                }`\n            );\n        }\n        if (last_server_status !== status) {\n            if (config.debug) {\n                const date = new Date();\n                console.log(\n                    `[${padWithLeadingZeros(\n                        date.getHours(),\n                        2\n                    )}:${padWithLeadingZeros(\n                        date.getMinutes(),\n                        2\n                    )}:${padWithLeadingZeros(\n                        date.getSeconds(),\n                        2\n                    )}] [msg-embed]  Updated message embed. from: ${last_server_status} | to: ${status}`\n                );\n            }\n            last_server_status = status;\n            await statusMessage.edit({\n                content: \"\",\n                embeds: [await BuildEmbed(version, players)],\n            });\n\n            UpdateStatus();\n        }\n    } catch (err) {\n        status = \"unreachable\"\n        if (config.debug) {\n            const date = new Date();\n            console.log(\n                `[${padWithLeadingZeros(\n                    date.getHours(),\n                    2\n                )}:${padWithLeadingZeros(\n                    date.getMinutes(),\n                    2\n                )}:${padWithLeadingZeros(\n                    date.getSeconds(),\n                    2\n                )}] [status-err] ${err}`\n            );\n        }\n        if (last_server_status !== status) {\n            if (config.debug) {\n                const date = new Date();\n                console.log(\n                    `[${padWithLeadingZeros(\n                        date.getHours(),\n                        2\n                    )}:${padWithLeadingZeros(\n                        date.getMinutes(),\n                        2\n                    )}:${padWithLeadingZeros(\n                        date.getSeconds(),\n                        2\n                    )}] [msg-embed]  Updated message embed. from: ${last_server_status} | to: ${status}`\n                );\n            }\n            last_server_status = status;\n            await statusMessage.edit({\n                content: \"\",\n                embeds: [\n                    new EmbedBuilder()\n                        .setTimestamp()\n                        .setTitle(\"Unreachable\")\n                        .setThumbnail(config.icons.unreachable)\n                        .setColor(`#${config.colors.unreachable}`)\n                        .setDescription(\n                            [\n                                `The server is currently unreachable`,\n                                `The server might currently be starting/stopping`,\n                                `Last status: ${capitalize(last_server_status)}`,\n                                `IP Address: \\`${config.smp.ip}:${config.smp.port}\\``,\n                                `\\n\\`${err}\\``,\n                            ].join(\"\\n\")\n                        ),\n                ],\n            });\n\n            UpdateStatus();\n        }\n    }\n\n    await sleep(config.status.updateInterval * 1000);\n    UpdateMessage();\n}\n\nasync function BuildEmbed(\n    version: { name: string; protocol: number },\n    players: {\n        online: number;\n        max: number;\n        sample: { name: string; id: string }[] | null;\n    }\n) {\n    const embed = new EmbedBuilder().setTimestamp();\n\n    if (status === \"offline\") {\n        embed\n            .setTitle(\"Offline\")\n            .setThumbnail(config.icons.offline)\n            .setColor(`#${config.colors.offline}`)\n            .setDescription(\n                [\n                    `The server is currently offline\\n`,\n                    `IP Address: \\`${config.smp.ip}:${config.smp.port}\\``,\n                ].join(\"\\n\")\n            );\n    } else if (status === \"preparing\") {\n        embed\n            .setTitle(\"Preparing\")\n            .setThumbnail(config.icons.preparing)\n            .setColor(`#${config.colors.preparing}`)\n            .setDescription(\n                [\n                    `The server is currently starting\\n`,\n                    `IP Address: \\`${config.smp.ip}:${config.smp.port}\\``,\n                ].join(\"\\n\")\n            );\n    } else if (status === \"loading\") {\n        embed\n            .setTitle(\"Loading\")\n            .setThumbnail(config.icons.loading)\n            .setColor(`#${config.colors.loading}`)\n            .setDescription(\n                [\n                    `The server is currently starting\\n`,\n                    `IP Address: \\`${config.smp.ip}:${config.smp.port}\\``,\n                ].join(\"\\n\")\n            );\n    } else if (status === \"online\") {\n        embed\n            .setTitle(\"Online\")\n            .setThumbnail(config.icons.online)\n            .setColor(`#${config.colors.online}`)\n            .setDescription(\n                [\n                    `The server is currently online\\n`,\n                    `IP Address: \\`${config.smp.ip}:${config.smp.port}\\``,\n                    `Version: ${version.name}`,\n                    // `Players: ${players.online}/${players.max} online`,\n                ].join(\"\\n\")\n            );\n    } else if (status === \"saving\") {\n        embed\n            .setTitle(\"Saving\")\n            .setThumbnail(config.icons.saving)\n            .setColor(`#${config.colors.saving}`)\n            .setDescription(\n                [\n                    `The server is currently stopping\\n`,\n                    `IP Address: \\`${config.smp.ip}:${config.smp.port}\\``,\n                ].join(\"\\n\")\n            );\n    }\n\n    return embed;\n}\n\nfunction UpdateStatus() {\n    if (\n        status === \"online\"\n    ) {\n        client.user?.setPresence({\n            status: \"online\",\n            activities: [\n                {\n                    name: config.smp.port\n                        ? `${config.smp.ip}:${config.smp.port}`\n                        : `${config.smp.ip}`,\n                    type: ActivityType.Playing,\n                },\n            ],\n        });\n    } else {\n        client.user?.setPresence({\n            status: \"dnd\",\n        });\n    }\n}\n\nfunction capitalize(str: string) {\n    return str[0]?.toUpperCase() + str?.substring(1);\n}\n\napp.listen(config.port, () =>\n    console.log(`[EXPRESS] Listening on port ${config.port}`)\n);\n\nfunction sleep(ms: number) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nfunction padWithLeadingZeros(num: number, totalLength: number) {\n    return String(num).padStart(totalLength, \"0\");\n}\n"],
  "mappings": "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",
  "names": ["loadenv", "config", "express", "ServerStatus"]
}
